<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalControllerCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalController</c> class is the controller class for the <c>LedgerJournal</c>
/// report.
/// </summary>
public class LedgerJournalControllerCopy extends SrsReportRunController implements BatchRetryable
{
    private QueryBuildRange journalTableBatchNumberRange;
    private QueryBuildRange journalTableTypeRange;
    private QueryBuildRange journalTransBatchNumberRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before it runs the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        #ISOCountryRegionCodes
        LedgerJournalContract contract = this.parmReportContract().parmRdpContract() as LedgerJournalContract;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
            contract.parmDisplayDescription(true);
        }
        else
        {
            contract.parmDisplayDescription(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean isValid = super();

        LedgerJournalContract contract = this.parmReportContract().parmRdpContract() as LedgerJournalContract;

        if (contract.parmJournalContext() == false)
        {
            Query query = this.getFirstQuery();

            this.findOrCreateReportRanges(query);

            if (strLRTrim(journalTableBatchNumberRange.value()) == ''
                && strLRTrim(journalTransBatchNumberRange.value()) == '')
            {
                isValid = checkFailed(
                    strFmt("@GeneralLedger:JournalBatchNumberIsRequiredForReport",
                        "@ProductFramework_Dialog:QueryTabCaption",
                        "@ProductFramework_Dialog:Filter"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query range that is based on the caller.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    /// <param name="_query">
    /// The <c>Controller</c> object.
    /// </param>
    public void setRange(Args _args, Query _query)
    {
        LedgerJournalTable externalLedgerJournalTable;
        LedgerJournalTrans externalLedgerJournalTrans;

        if (_args && _args.dataset())
        {
            switch (_args.dataset())
            {
                case tableNum(LedgerJournalTrans):
                    externalLedgerJournalTrans = _args.record();
                    break;

                case tableNum(LedgerJournalTable):
                    externalLedgerJournalTable = _args.record();
                    break;
            }
        }

        LedgerJournalContract contract = this.parmReportContract().parmRdpContract() as LedgerJournalContract;

        contract.parmJournalContext(true);

        this.findOrCreateReportRanges(_query);

        if (externalLedgerJournalTrans)
        {
            externalLedgerJournalTable = LedgerJournalTable::find(externalLedgerJournalTrans.JournalNum);

            journalTransBatchNumberRange.value(externalLedgerJournalTrans.JournalNum);
            journalTransBatchNumberRange.status(RangeStatus::Locked);

            journalTableBatchNumberRange.value(externalLedgerJournalTable.JournalNum);
            journalTableBatchNumberRange.status(RangeStatus::Locked);

            journalTableTypeRange.value(SysQuery::value(enum2int(externalLedgerJournalTable.JournalType)));
            journalTableTypeRange.status(RangeStatus::Locked);
        }
        else if (externalLedgerJournalTable)
        {
            journalTransBatchNumberRange.value(externalLedgerJournalTable.JournalNum);
            journalTransBatchNumberRange.status(RangeStatus::Locked);

            journalTableBatchNumberRange.value(externalLedgerJournalTable.JournalNum);
            journalTableBatchNumberRange.status(RangeStatus::Locked);

            journalTableTypeRange.value(SysQuery::value(enum2int(externalLedgerJournalTable.JournalType)));
            journalTableTypeRange.status(RangeStatus::Locked);
        }
        else
        {
            // Clear the ranges if the report is invoked from the GL menu

            journalTransBatchNumberRange.value('');
            journalTransBatchNumberRange.status(RangeStatus::Open);

            journalTableBatchNumberRange.value('');
            journalTableBatchNumberRange.status(RangeStatus::Open);

            journalTableTypeRange.value('');
            journalTableTypeRange.status(RangeStatus::Open);

            contract.parmJournalContext(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateReportRanges</Name>
				<Source><![CDATA[
    private void findOrCreateReportRanges(Query _query)
    {
        QueryBuildDataSource ledgerJournalTableQBDS = _query.dataSourceTable(tableNum(LedgerJournalTable));
        journalTableBatchNumberRange = SysQuery::findOrCreateRange(ledgerJournalTableQBDS, fieldNum(LedgerJournalTable, JournalNum));
        journalTableTypeRange = SysQuery::findOrCreateRange(ledgerJournalTableQBDS, fieldNum(LedgerJournalTable, JournalType));

        QueryBuildDataSource ledgerJournalTransQBDS = _query.dataSourceTable(tableNum(LedgerJournalTrans));
        journalTransBatchNumberRange = SysQuery::findOrCreateRange(ledgerJournalTransQBDS, fieldNum(LedgerJournalTrans, JournalNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerJournalControllerCopy controller = new LedgerJournalControllerCopy();
        controller.parmReportName(ssrsReportStr(LedgerJournalCopy, Report));
        controller.parmArgs(_args);
        controller.setRange(_args, controller.parmReportContract().parmQueryContracts().lookup(controller.getFirstQueryContractKey()));
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>